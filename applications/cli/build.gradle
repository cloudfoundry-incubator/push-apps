import groovy.json.JsonSlurper

apply from: "$rootProject.rootDir/gradle/kotlin.gradle"
apply from: "$rootProject.rootDir/gradle/test.gradle"
apply from: "$rootProject.rootDir/gradle/publish.gradle"

apply plugin: 'java'
apply plugin: 'application'

dependencies {
    compile project(":components:push-apps")

    compile 'com.beust:jcommander:1.72'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.9.1'
    compile 'org.apache.logging.log4j:log4j-core:2.9.1'
    compile 'org.apache.logging.log4j:log4j-iostreams:2.9.1'
}

mainClassName = 'org.cloudfoundry.tools.pushapps.PushAppsCli'
jar {
    manifest {
        attributes 'Main-Class': "$mainClassName"
    }

    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

    baseName "push-apps-standalone"
    version pushAppsVersion
}

task javadocJar(type: Jar, dependsOn: classes) {
    classifier = 'javadoc'
    baseName "push-apps-standalone"
    version version
    from javadoc
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    baseName "push-apps-standalone"
    version version
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

def description = 'A standalone JAR that helps automate deployments of applications to Cloud Foundry.'

afterEvaluate {
    publishing {
        publications {
            PushAppsStandalone(MavenPublication) {
                artifact jar
                artifact sourcesJar
                artifact javadocJar
                groupId 'org.cloudfoundry.tools'
                artifactId 'push-apps-standalone'
                version pushAppsVersion
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', description)
                    root.appendNode('name', 'Push Apps Standalone')
                    root.appendNode('url', 'https://github.com/cloudfoundry-incubator/push-apps')
                    root.children().last() + pomConfig
                }
            }
        }
    }
}

bintray {
    publications = ['PushAppsStandalone']
    pkg {
        repo = 'maven'
        name = 'push-apps-standalone'
        userOrg = user
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/cloudfoundry-incubator/push-apps.git'
        labels = ['cf', 'cloudfoundry']
        publicDownloadNumbers = true
        version {
            name = pushAppsVersion
            desc = description
            released = new Date()
        }
    }
}

//noinspection GroovyAssignabilityCheck
task publishUploadedStandaloneArchives(dependsOn: ["checkBintrayCredentials"]) {
    doLast {
        def bintrayApiKey = System.getenv('BINTRAY_API_KEY')

        def publishUploadedArtifact = [
                'curl',
                '-u',
                "trevorwhitney:$bintrayApiKey",
                '-X', 'POST',
                "https://api.bintray.com/content/trevorwhitney/maven/push-apps-standalone/$pushAppsVersion/publish",
        ].execute()

        def publishUploadedArtifactJson = new JsonSlurper().parseText(publishUploadedArtifact.text)

        println("Publishing uploaded push-apps-standalone artifacts: $publishUploadedArtifactJson")
    }
}

//noinspection GroovyAssignabilityCheck
task signStandaloneArtifacts(dependsOn: ["checkBintrayCredentials", "checkMavenCredentials"]) {
    doLast {
        def bintrayApiKey = System.getenv('BINTRAY_API_KEY')
        def bintrayGpgPassphrase = System.getenv('BINTRAY_GPG_PASSPHRASE')

        def pushAppsStandalone = [
                'curl',
                '-u',
                "trevorwhitney:$bintrayApiKey",
                '-X', 'POST',
                "https://api.bintray.com/gpg/trevorwhitney/maven/push-apps-standalone/versions/$pushAppsVersion",
                '-H',
                "X-GPG-PASSPHRASE: $bintrayGpgPassphrase"
        ].execute()

        def pushAppsStandaloneJson = new JsonSlurper().parseText(pushAppsStandalone.text)

        println("Signing push-apps-standalone: $pushAppsStandaloneJson")
    }
}

//noinspection GroovyAssignabilityCheck
task syncStandaloneToMavenCentral(dependsOn: ["checkBintrayCredentials", "checkMavenCredentials"]) {
    doLast {
        def bintrayApiKey = System.getenv('BINTRAY_API_KEY')
        def mavenCentralTokenUser = System.getenv('MAVEN_CENTRAL_TOKEN_USER')
        def mavenCentralTokenPassword = System.getenv('MAVEN_CENTRAL_TOKEN_PASSWORD')

        def syncPushAppsStandalone = [
                'curl',
                '-u',
                "trevorwhitney:$bintrayApiKey",
                '-X',
                'POST',
                "https://api.bintray.com/maven_central_sync/trevorwhitney/maven/push-apps-standalone/versions/$pushAppsVersion",
                '-d',
                "{\"username\": \"$mavenCentralTokenUser\",\"password\": \"$mavenCentralTokenPassword\", \"close\": \"1\"}",
                '-H',
                "Content-Type: application/json",
                "-H",
                "Accept: application/json"
        ].execute()

        def syncPushAppsStandaloneJson = new JsonSlurper().parseText(syncPushAppsStandalone.text)
        println("Sycning push-apps-standalone to maven central: $syncPushAppsStandaloneJson")
    }
}
