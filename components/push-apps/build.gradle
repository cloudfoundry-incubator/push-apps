import groovy.json.JsonSlurper

apply from: "$rootProject.rootDir/gradle/kotlin.gradle"
apply from: "$rootProject.rootDir/gradle/publish.gradle"

dependencies {
    compile 'org.cloudfoundry:cloudfoundry-client-reactor:3.13.0.RELEASE'
    compile 'org.cloudfoundry:cloudfoundry-operations:3.13.0.RELEASE'
    compile 'io.projectreactor:reactor-core:3.2.1.RELEASE'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.9.1'
    compile 'org.apache.logging.log4j:log4j-core:2.9.1'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.2'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.2'
    compile 'org.flywaydb:flyway-core:4.2.0'
    compile 'org.mariadb.jdbc:mariadb-java-client:2.3.0'
    compile 'org.postgresql:postgresql:42.1.4'
    compile 'org.apache.commons:commons-io:1.3.2'
}

jar {
    baseName "push-apps"
    version pushAppsVersion
}

task javadocJar(type: Jar, dependsOn: classes) {
    baseName "push-apps"
    classifier = 'javadoc'
    version version
    from javadoc
}

task sourcesJar(type: Jar, dependsOn: classes) {
    baseName "push-apps"
    classifier = 'sources'
    version version
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def description = 'A library that helps automate deployments of applications to Cloud Foundry.'

afterEvaluate {
    publishing {
        publications {
            PushApps(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                groupId 'org.cloudfoundry.tools'
                artifactId 'push-apps'
                version pushAppsVersion
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', description)
                    root.appendNode('name', 'Push Apps')
                    root.appendNode('url', 'https://github.com/cloudfoundry-incubator/push-apps')
                    root.children().last() + pomConfig
                }
            }
        }
    }
}

bintray {
    publications = ['PushApps']
    pkg {
        repo = 'maven'
        name = 'push-apps'
        userOrg = user
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/cloudfoundry-incubator/push-apps.git'
        labels = ['cf', 'cloudfoundry']
        publicDownloadNumbers = true
        version {
            name = pushAppsVersion
            desc = description
            released = new Date()
        }
    }
}

//noinspection GroovyAssignabilityCheck
task publishUploadedLibraryArchives(dependsOn: ["checkBintrayCredentials"]) {
    doLast {
        def bintrayApiKey = System.getenv('BINTRAY_API_KEY')

        def publishUploadedArtifact = [
                'curl',
                '-u',
                "trevorwhitney:$bintrayApiKey",
                '-X', 'POST',
                "https://api.bintray.com/content/trevorwhitney/maven/push-apps/$pushAppsVersion/publish",
        ].execute()

        def publishUploadedArtifactJson = new JsonSlurper().parseText(publishUploadedArtifact.text)

        println("Publishing uploaded push-apps artifacts: $publishUploadedArtifactJson")
    }
}

//noinspection GroovyAssignabilityCheck
task signLibraryArtifacts(dependsOn: ["checkBintrayCredentials", "checkMavenCredentials"]) {
    doLast {
        def bintrayApiKey = System.getenv('BINTRAY_API_KEY')
        def bintrayGpgPassphrase = System.getenv('BINTRAY_GPG_PASSPHRASE')

        def pushAppsCommand = [
                'curl',
                '-u',
                "trevorwhitney:$bintrayApiKey",
                '-X',
                'POST',
                "https://api.bintray.com/gpg/trevorwhitney/maven/push-apps/versions/$pushAppsVersion",
                '-H',
                "X-GPG-PASSPHRASE: $bintrayGpgPassphrase"
        ].execute()
        def pushAppsCommandJson = new JsonSlurper().parseText(pushAppsCommand.text)

        println("Signing push-apps: $pushAppsCommandJson")
    }
}

//noinspection GroovyAssignabilityCheck
task syncLibraryToMavenCentral(dependsOn: ["checkBintrayCredentials", "checkMavenCredentials"]) {
    doLast {
        def bintrayApiKey = System.getenv('BINTRAY_API_KEY')
        def mavenCentralTokenUser = System.getenv('MAVEN_CENTRAL_TOKEN_USER')
        def mavenCentralTokenPassword = System.getenv('MAVEN_CENTRAL_TOKEN_PASSWORD')

        def synPushAppsLibrary = [
                'curl',
                '-u',
                "trevorwhitney:$bintrayApiKey",
                '-X',
                'POST',
                "https://api.bintray.com/maven_central_sync/trevorwhitney/maven/push-apps/versions/$pushAppsVersion",
                '-d',
                "{\"username\": \"$mavenCentralTokenUser\",\"password\": \"$mavenCentralTokenPassword\", \"close\": \"1\"}",
                '-H',
                "Content-Type: application/json",
                "-H",
                "Accept: application/json"
        ].execute()

        def synPushAppsLibraryJson = new JsonSlurper().parseText(synPushAppsLibrary.text)
        println("Sycning push-apps-standalone to maven central: $synPushAppsLibraryJson")
    }
}
